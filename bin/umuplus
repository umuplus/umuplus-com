#!/usr/bin/env node

'use strict';

const joinPath = require('path').join;
require('dotenv').config({
    path: joinPath(process.env[(process.platform === 'win32') ? 'USERPROFILE' : 'HOME'], '/.umuplus.env')
});

var credentials = {
    url: process.env.NAMEDOTCOM_URL,
    username: process.env.NAMEDOTCOM_USERNAME,
    token: process.env.NAMEDOTCOM_TOKEN
}, $ip;

var express = require('express');
var format = require('util').format;
var publicIp = require('public-ip');
var Redis = require('ioredis');
var request = require('request');
var series = require('async').series;

var app = express(), port = 8688;
app.use('/', express.static(__dirname + '/../'));
app.listen(port, function () {
    console.log('umuplus.com is up and running on port', port);
});

var $homeDomains = process.env.NAMEDOTCOM_DOMAINS.split(','),
    $modifiedDomains = process.env.NAMEDOTCOM_SUBDOMAINS.split(',');
var $redis = new Redis();

function updateDNS() {
    var keyIP = 'public-ip';
    publicIp.v4().then(function (ip) {
        if (!ip || !ip.toString().trim().length) return;

        $redis.get(keyIP, function (error, data) {
            if (!data || !data.toString().trim().length) {
                $redis.set(keyIP, ip, function () {
                    $ip = ip;
                });
            } else if (data !== ip) {
                $ip = ip;
                login();
            }
        });
    }).catch(function (e) {
        console.log('Update DNS:', e.message);
    });
}

function login() {
    request.post({
        url: format('%s/api/login', credentials.url),
        body: {username: credentials.username, api_token: credentials.token},
        json: true
    }, function optionalCallback(error, httpResponse, response) {
        if (error) return console.log('Login:', error.message);

        if (response && response.result && response.result.code === 100)
            return list(response['session_token'], $homeDomains[0]);
        else console.log('Login:', JSON.stringify(response));
    });
}

function list(token, $domain) {
    request.get({
        headers: {'Api-Session-Token': token},
        url: format('%s/api/dns/list/%s', credentials.url, $domain),
        json: true
    }, function optionalCallback(error, httpResponse, response) {
        if (error) return console.log('List:', error.message);

        var run = {};
        if (response && response.result && response.result.code === 100)
            response['records'].forEach(function (record, index) {
                if (record.type === 'A' && $homeDomains.indexOf(record.name) > -1 && record.content !== $ip)
                    run[index] = deleteRecord(token, record.record_id.toString(), $domain);
            });
        series(run, function () {
            var run = {};
            $modifiedDomains.forEach(function (d, index) {
                run[index] = createRecord(token, {name: d, type: 'A', content: $ip, ttl: '300'}, $domain);
            });
            series(run, function () {
            });
        });
    });
}

function deleteRecord(token, id, $domain) {
    return function (done) {
        request.post({
            headers: {'Api-Session-Token': token},
            url: format('%s/api/dns/delete/%s', credentials.url, $domain),
            body: {record_id: id},
            json: true
        }, function (error) {
            if (error) console.log('Delete:', error.message);

            done();
        });
    }
}

function createRecord(token, record, $domain) {
    return function (done) {
        request.post({
            headers: {'Api-Session-Token': token},
            url: format('%s/api/dns/create/%s', credentials.url, $domain),
            body: record,
            json: true
        }, function (error) {
            if (error) console.log('Create:', error.message);

            done();
        });
    }
}

if (process.env.NAMEDOTCOM_ENABLED === 'true') {
    console.log('feature enabled: updating public ip address automatically');
    updateDNS();
    setInterval(updateDNS, 30000);
}
